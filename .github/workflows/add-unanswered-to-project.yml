name: Add Unanswered PRs and Issues to PyTorch Project 133

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Query unanswered PRs and issues and add to project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwDOAUB9vs4A-j69";

            async function addItem(contentId) {
              try {
                await github.graphql(`
                  mutation {
                    addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${contentId}"}) {
                      item { id }
                    }
                  }
                `);
                console.log(`Added item with contentId: ${contentId}`);
              } catch (error) {
                console.log(`Error adding item ${contentId}: ${error.message}`);
              }
            }

            try {
              // Get unanswered PRs: open, not draft, not approved
              const prs = await github.paginate(
                github.rest.pulls.list,
                {
                  owner: 'pytorch',
                  repo: 'executorch',
                  state: 'open',
                  draft: false,
                }
              );

              for (const pr of prs) {
                const reviews = await github.rest.pulls.listReviews({
                  owner: 'pytorch',
                  repo: 'executorch',
                  pull_number: pr.number
                });
                const approved = reviews.data.some(r => r.state === 'APPROVED');
                if (!approved) {
                  console.log(`Adding unanswered PR #${pr.number}`);
                  await addItem(pr.node_id);
                }
              }

              // Get open issues (not PRs)
              const issues = await github.paginate(
                github.rest.issues.listForRepo,
                {
                  owner: 'pytorch',
                  repo: 'executorch',
                  state: 'open',
                  filter: 'all'
                }
              );

              for (const issue of issues) {
                if (!issue.pull_request) {
                  console.log(`Adding open issue #${issue.number}`);
                  await addItem(issue.node_id);
                }
              }
            } catch (error) {
              core.setFailed(`Workflow failed: ${error.message}`);
            }
